name: Deploy Windows 11 VM (via Terraform)

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      confirm_destroy:
        description: 'Type "DESTROY" to confirm resource deletion (only for destroy action)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Handle existing resource group
        run: |
          # Check if resource group exists in state
          if ! terraform state list | grep -q "azurerm_resource_group.rg"; then
            echo "Resource group not in state, will use existing one"
          else
            echo "Resource group already managed by Terraform"
          fi
        working-directory: azure-vm-deployment-Terraform
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: DEBUG

      - name: Wait for VM to be fully running
        run: |
          echo "‚è≥ Waiting for VM to be fully running and IP to be assigned..."
          sleep 60
        working-directory: azure-vm-deployment-Terraform

      - name: Get VM IP Address before stopping
        run: |
          echo "üîç Getting VM IP address..."
          VM_NAME=$(terraform output -raw vm_name 2>/dev/null || echo 'DevWin11Vm')
          RG_NAME=$(terraform output -raw resource_group_name 2>/dev/null || echo 'mehul02-Learning-Azure')
          IP_METHOD=$(terraform output -raw public_ip_address_allocation 2>/dev/null || echo 'Dynamic')
          
          # Try to get IP from Azure CLI
          PUBLIC_IP=$(az vm show -d --resource-group "$RG_NAME" --name "$VM_NAME" --query publicIps -o tsv 2>/dev/null || echo "")
          
          if [ -z "$PUBLIC_IP" ]; then
            echo "‚ö†Ô∏è  Public IP not yet assigned, checking public IP resource..."
            PUBLIC_IP=$(az network public-ip show --resource-group "$RG_NAME" --name "${VM_NAME}-public-ip" --query ipAddress -o tsv 2>/dev/null || echo "Not assigned")
          fi
          
          echo "üìç VM Public IP: $PUBLIC_IP"
          echo "üîß IP Allocation Method: $IP_METHOD"
          
          if [ "$IP_METHOD" = "Dynamic" ] && [ "$PUBLIC_IP" = "Not assigned" ]; then
            echo "üí° Note: Dynamic IP will be assigned when VM starts"
            PUBLIC_IP="Will be assigned when VM starts"
          fi
          
          echo "VM_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "IP_METHOD=$IP_METHOD" >> $GITHUB_ENV
        working-directory: azure-vm-deployment-Terraform

      - name: Output VM IP Address
        run: |
          echo "VM IP Address:"
          terraform output -raw public_ip_address || echo "No public IP address found"
        working-directory: azure-vm-deployment-Terraform

      - name: Output VM Details
        run: |
          echo "üéâ VM Deployment Complete!"
          echo "üìã VM Details:"
          echo "  - VM Name: $(terraform output -raw vm_name 2>/dev/null || echo 'Not available')"
          echo "  - Resource Group: $(terraform output -raw resource_group_name 2>/dev/null || echo 'Not available')"
          echo "  - Admin Username: $(terraform output -raw admin_username 2>/dev/null || echo 'Not available')"
          echo "  - Public IP: ${VM_PUBLIC_IP:-$(terraform output -raw public_ip_address 2>/dev/null || echo 'Not available')}"
          echo "  - IP Allocation: ${IP_METHOD:-$(terraform output -raw public_ip_address_allocation 2>/dev/null || echo 'Not available')}"
          echo "  - VM Initial State: $(terraform output -raw vm_initial_state 2>/dev/null || echo 'Not available')"
          echo ""
          echo "üí∞ VM is created in STOPPED state to save costs!"
          
          if [ "${IP_METHOD:-Dynamic}" = "Dynamic" ]; then
            echo "üí° Dynamic IP: Only charged when VM is running (~$2.40/month when active)"
            echo "üîå Start VM to get IP: az vm start --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          else
            echo "üí° Static IP: Always charged (~$3.65/month) but IP is reserved"
            echo "üîå Start VM: az vm start --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          fi
          
          echo "üõë Stop VM to save costs: az vm deallocate --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          echo "üîß Use the 'Destroy' workflow or manual workflow dispatch with 'destroy' action to clean up"
        working-directory: azure-vm-deployment-Terraform

  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Destroy confirmation not provided. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "‚úÖ Destroy confirmation validated"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Show resources to be destroyed
        run: |
          echo "üìã Resources that will be destroyed:"
          terraform plan -destroy -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Wait for final confirmation
        run: |
          echo "‚è≥ Waiting 30 seconds before destruction..."
          echo "üö® This will permanently delete all resources!"
          sleep 30

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: INFO

      - name: Cleanup confirmation
        run: |
          echo "üéâ Resources have been successfully destroyed!"
          echo "üí∞ This should help reduce your Azure costs."
          echo "üìä Check your Azure portal to confirm all resources are deleted."
