name: Deploy Windows 11 VM (via Terraform)

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      confirm_destroy:
        description: 'Type "DESTROY" to confirm resource deletion (only for destroy action)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Handle existing resource group
        run: |
          # Check if resource group exists in state
          if ! terraform state list | grep -q "azurerm_resource_group.rg"; then
            echo "Resource group not in state, will use existing one"
          else
            echo "Resource group already managed by Terraform"
          fi
        working-directory: azure-vm-deployment-Terraform
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: DEBUG

      - name: Wait for VM to be fully running
        run: |
          echo "⏳ Waiting for VM to be fully running and IP to be assigned..."
          sleep 60
        working-directory: azure-vm-deployment-Terraform

      - name: Get VM IP Address before stopping
        run: |
          echo "🔍 Getting VM IP address..."
          VM_NAME=$(terraform output -raw vm_name 2>/dev/null || echo 'DevWin11Vm')
          RG_NAME=$(terraform output -raw resource_group_name 2>/dev/null || echo 'mehul02-Learning-Azure')
          IP_METHOD=$(terraform output -raw public_ip_address_allocation 2>/dev/null || echo 'Dynamic')
          
          # Try to get IP from Azure CLI
          PUBLIC_IP=$(az vm show -d --resource-group "$RG_NAME" --name "$VM_NAME" --query publicIps -o tsv 2>/dev/null || echo "")
          
          if [ -z "$PUBLIC_IP" ]; then
            echo "⚠️  Public IP not yet assigned, checking public IP resource..."
            PUBLIC_IP=$(az network public-ip show --resource-group "$RG_NAME" --name "${VM_NAME}-public-ip" --query ipAddress -o tsv 2>/dev/null || echo "Not assigned")
          fi
          
          echo "📍 VM Public IP: $PUBLIC_IP"
          echo "🔧 IP Allocation Method: $IP_METHOD"
          
          if [ "$IP_METHOD" = "Dynamic" ] && [ "$PUBLIC_IP" = "Not assigned" ]; then
            echo "💡 Note: Dynamic IP will be assigned when VM starts"
            PUBLIC_IP="Will be assigned when VM starts"
          fi
          
          echo "VM_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "IP_METHOD=$IP_METHOD" >> $GITHUB_ENV
        working-directory: azure-vm-deployment-Terraform

      - name: Output VM IP Address
        run: |
          echo "VM IP Address:"
          terraform output -raw public_ip_address || echo "No public IP address found"
        working-directory: azure-vm-deployment-Terraform

      - name: Output VM Details
        run: |
          echo "🎉 VM Deployment Complete!"
          echo "📋 VM Details:"
          echo "  - VM Name: $(terraform output -raw vm_name 2>/dev/null || echo 'Not available')"
          echo "  - Resource Group: $(terraform output -raw resource_group_name 2>/dev/null || echo 'Not available')"
          echo "  - Admin Username: $(terraform output -raw admin_username 2>/dev/null || echo 'Not available')"
          echo "  - Public IP: ${VM_PUBLIC_IP:-$(terraform output -raw public_ip_address 2>/dev/null || echo 'Not available')}"
          echo "  - IP Allocation: ${IP_METHOD:-$(terraform output -raw public_ip_address_allocation 2>/dev/null || echo 'Not available')}"
          echo "  - VM Initial State: $(terraform output -raw vm_initial_state 2>/dev/null || echo 'Not available')"
          echo ""
          echo "💰 VM is created in STOPPED state to save costs!"
          
          if [ "${IP_METHOD:-Dynamic}" = "Dynamic" ]; then
            echo "💡 Dynamic IP: Only charged when VM is running (~$2.40/month when active)"
            echo "🔌 Start VM to get IP: az vm start --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          else
            echo "💡 Static IP: Always charged (~$3.65/month) but IP is reserved"
            echo "🔌 Start VM: az vm start --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          fi
          
          echo "🛑 Stop VM to save costs: az vm deallocate --resource-group $(terraform output -raw resource_group_name 2>/dev/null) --name $(terraform output -raw vm_name 2>/dev/null)"
          echo "🔧 Use the 'Destroy' workflow or manual workflow dispatch with 'destroy' action to clean up"
        working-directory: azure-vm-deployment-Terraform

  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Destroy confirmation not provided. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "✅ Destroy confirmation validated"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Check Terraform state and Azure resources
        run: |
          echo "🔍 Checking Terraform state..."
          if terraform state list 2>/dev/null; then
            echo "✅ Terraform state found"
          else
            echo "⚠️  No Terraform state found - this is normal if no resources were previously deployed"
          fi
          
          echo ""
          echo "🔍 Checking actual Azure resources..."
          RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          
          echo "📋 Checking resource group: $RESOURCE_GROUP_NAME"
          
          # Check if resource group exists
          if az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
            echo "✅ Resource group '$RESOURCE_GROUP_NAME' exists"
            
            # List resources in the group
            echo "📋 Resources in resource group:"
            az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type, Location:location}" -o table || echo "❌ Failed to list resources"
            
            # Check for specific VM
            echo ""
            echo "🔍 Checking for VM 'DevWin11Vm'..."
            if az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "DevWin11Vm" --output none 2>/dev/null; then
              echo "✅ VM 'DevWin11Vm' exists"
              VM_STATE=$(az vm show -d --resource-group "$RESOURCE_GROUP_NAME" --name "DevWin11Vm" --query powerState -o tsv)
              echo "🔋 VM Power State: $VM_STATE"
            else
              echo "❌ VM 'DevWin11Vm' not found"
            fi
          else
            echo "❌ Resource group '$RESOURCE_GROUP_NAME' does not exist"
          fi
          
          echo ""
          echo "📋 Terraform plan for destruction:"
          terraform plan -destroy -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Wait for final confirmation
        run: |
          echo "⏳ Waiting 30 seconds before destruction..."
          echo "🚨 This will permanently delete all resources!"
          sleep 30

      - name: Terraform Destroy or Direct Azure Cleanup
        run: |
          echo "🗑️  Attempting Terraform destroy..."
          
          # Try Terraform destroy first
          if terraform destroy -auto-approve -var-file="terraform.tfvars" 2>/dev/null; then
            echo "✅ Terraform destroy completed successfully"
          else
            echo "⚠️  Terraform destroy completed but may have had no resources to destroy (this is normal if no state file exists)"
          fi
          
          # Check if VM-specific resources still exist and perform targeted cleanup
          RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          VM_NAME="DevWin11Vm"
          
          echo ""
          echo "🔍 Post-destroy check - verifying VM-specific resource cleanup..."
          
          if az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
            echo "✅ Resource group '$RESOURCE_GROUP_NAME' exists"
            
            # Check for VM-specific resources
            VM_EXISTS=$(az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --output none 2>/dev/null && echo "true" || echo "false")
            
            if [ "$VM_EXISTS" = "true" ]; then
              echo "⚠️  VM '$VM_NAME' still exists, performing targeted cleanup..."
              
              # Delete VM and associated resources in proper order
              echo "�️  Deleting Virtual Machine '$VM_NAME'..."
              az vm delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --yes || echo "⚠️  VM deletion failed"

              echo "💽 Deleting OS Disk..."
              # Get the actual OS disk name for the VM
              OS_DISK_NAME=$(az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --query "storageProfile.osDisk.name" -o tsv 2>/dev/null)
              if [ -n "$OS_DISK_NAME" ]; then
                echo "🔍 Found OS Disk: $OS_DISK_NAME"
                az disk delete --resource-group "$RESOURCE_GROUP_NAME" --name "$OS_DISK_NAME" --yes || echo "⚠️  OS Disk deletion failed"
              else
                echo "⚠️  Could not find OS Disk name, trying fallback pattern..."
                # Fallback: try to find disk with VM name pattern
                DISK_NAME=$(az disk list --resource-group "$RESOURCE_GROUP_NAME" --query "[?contains(name, '$VM_NAME')].name" -o tsv 2>/dev/null | head -1)
                if [ -n "$DISK_NAME" ]; then
                  echo "🔍 Found disk: $DISK_NAME"
                  az disk delete --resource-group "$RESOURCE_GROUP_NAME" --name "$DISK_NAME" --yes || echo "⚠️  OS Disk deletion failed"
                else
                  echo "⚠️  No OS disk found to delete"
                fi
              fi              
              
              echo "🔌 Deleting Network Interface '$VM_NAME-nic'..."
              az network nic delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nic" || echo "⚠️  NIC deletion failed"
              
              echo "🌐 Deleting Public IP '$VM_NAME-public-ip'..."
              az network public-ip delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-public-ip" || echo "⚠️  Public IP deletion failed"
              
              echo "🔒 Deleting Network Security Group '$VM_NAME-nsg'..."
              az network nsg delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nsg" || echo "⚠️  NSG deletion failed"
              
              echo "🌐 Deleting Virtual Network '$VM_NAME-vnet'..."
              az network vnet delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-vnet" || echo "⚠️  VNet deletion failed"
              
              echo "✅ VM-specific resource cleanup completed"
            else
              echo "✅ VM '$VM_NAME' not found (already deleted)"
            fi
          else
            echo "❌ Resource group '$RESOURCE_GROUP_NAME' does not exist"
          fi
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: INFO

      - name: Final cleanup confirmation
        run: |
          echo "🎉 VM cleanup process completed!"
          echo ""
          
          RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          VM_NAME="DevWin11Vm"
          
          echo "🔍 Final verification..."
          
          # Check if VM still exists
          if az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --output none 2>/dev/null; then
            echo "⚠️  VM '$VM_NAME' still exists in resource group '$RESOURCE_GROUP_NAME'"
            echo "🔍 Check Azure Portal for deletion status"
          else
            echo "✅ VM '$VM_NAME' has been successfully deleted"
          fi
          
          # Show remaining resources in the resource group
          echo ""
          echo "📋 Remaining resources in resource group '$RESOURCE_GROUP_NAME':"
          az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type}" -o table || echo "No resources found or resource group doesn't exist"
          
          echo ""
          echo "� This should help reduce your Azure costs!"
          echo "📊 VM-specific resources have been targeted for deletion"
          echo "� The resource group and other resources remain untouched"
          echo ""
          echo "💡 Next steps:"
          echo "   - If VM resources remain, check Azure Portal for deletion status"
          echo "   - Consider using ARM templates for future deployments"
          echo "   - ARM templates handle resource lifecycle better than Terraform for learning scenarios"
