name: Deploy Windows 11 VM (via Terraform)

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Handle existing resource group
        run: |
          # Check if resource group exists in state
          if ! terraform state list | grep -q "azurerm_resource_group.rg"; then
            echo "Resource group not in state, will use existing one"
          else
            echo "Resource group already managed by Terraform"
          fi
        working-directory: azure-vm-deployment-Terraform
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: DEBUG

      - name: Output VM IP Address
        run: |
          echo "VM IP Address:"
          terraform output -raw public_ip_address || echo "No public IP address found"
        working-directory: azure-vm-deployment-Terraform
