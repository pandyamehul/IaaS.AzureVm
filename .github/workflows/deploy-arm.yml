name: Deploy Windows 11 VM (via ARM Templates)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      confirm_destroy:
        description: 'Type "DESTROY" to confirm resource deletion (only for destroy action)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      RESOURCE_GROUP_NAME: "mehul02-Learning-Azure"
      DEPLOYMENT_NAME: "vm-deployment-$(date +%Y%m%d%H%M%S)"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Validate ARM Template
        run: |
          echo "üîç Validating ARM template..."
          az deployment group validate \
            --resource-group $RESOURCE_GROUP_NAME \
            --template-file azure-vm-deployment-Arm/azuredeploy.json \
            --parameters azure-vm-deployment-Arm/azuredeploy.parameters.json \
            --parameters adminPassword="${{ secrets.TF_VAR_ADMIN_PASSWORD }}"
        working-directory: .

      - name: Deploy ARM Template
        run: |
          echo "üöÄ Deploying ARM template..."
          DEPLOYMENT_NAME="vm-deployment-$(date +%Y%m%d%H%M%S)"
          
          az deployment group create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --template-file azure-vm-deployment-Arm/azuredeploy.json \
            --parameters azure-vm-deployment-Arm/azuredeploy.parameters.json \
            --parameters adminPassword="${{ secrets.TF_VAR_ADMIN_PASSWORD }}" \
            --verbose
          
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV
        working-directory: .

      - name: Wait for VM to be fully running
        run: |
          echo "‚è≥ Waiting for VM to be fully running and IP to be assigned..."
          sleep 60

      - name: Get VM IP Address and Details
        run: |
          echo "üîç Getting VM details..."
          
          # Get deployment outputs
          VM_NAME=$(az deployment group show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.vmName.value -o tsv)
          
          ADMIN_USERNAME=$(az deployment group show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.adminUsername.value -o tsv)
          
          IP_METHOD=$(az deployment group show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.publicIPAllocationMethod.value -o tsv)
          
          VM_STATE=$(az deployment group show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.vmInitialState.value -o tsv)
          
          # Try to get public IP
          PUBLIC_IP=$(az vm show -d \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $VM_NAME \
            --query publicIps -o tsv 2>/dev/null || echo "")
          
          if [ -z "$PUBLIC_IP" ]; then
            echo "‚ö†Ô∏è  Public IP not yet assigned, checking public IP resource..."
            PUBLIC_IP=$(az network public-ip show \
              --resource-group $RESOURCE_GROUP_NAME \
              --name "${VM_NAME}-public-ip" \
              --query ipAddress -o tsv 2>/dev/null || echo "Not assigned")
          fi
          
          if [ "$IP_METHOD" = "Dynamic" ] && [ "$PUBLIC_IP" = "Not assigned" ]; then
            echo "üí° Note: Dynamic IP will be assigned when VM starts"
            PUBLIC_IP="Will be assigned when VM starts"
          fi
          
          echo "VM_NAME=$VM_NAME" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=$ADMIN_USERNAME" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "IP_METHOD=$IP_METHOD" >> $GITHUB_ENV
          echo "VM_STATE=$VM_STATE" >> $GITHUB_ENV

      - name: Deallocate VM if configured
        run: |
          echo "üîç Checking if VM should be deallocated..."
          
          # Check if VM should be stopped after creation
          VM_START_AFTER_CREATION=$(az deployment group show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $DEPLOYMENT_NAME \
            --query "properties.parameters.vmStartAfterCreation.value" -o tsv)
          
          if [ "$VM_START_AFTER_CREATION" = "false" ]; then
            echo "üõë Deallocating VM to save costs..."
            az vm deallocate --resource-group $RESOURCE_GROUP_NAME --name $VM_NAME
            echo "‚úÖ VM deallocated successfully"
          else
            echo "‚ñ∂Ô∏è  VM will remain running as configured"
          fi

      - name: Output VM Details
        run: |
          echo "üéâ ARM Template Deployment Complete!"
          echo "üìã VM Details:"
          echo "  - VM Name: $VM_NAME"
          echo "  - Resource Group: $RESOURCE_GROUP_NAME"
          echo "  - Admin Username: $ADMIN_USERNAME"
          echo "  - Public IP: $PUBLIC_IP"
          echo "  - IP Allocation: $IP_METHOD"
          echo "  - VM Initial State: $VM_STATE"
          echo "  - Deployment Name: $DEPLOYMENT_NAME"
          echo ""
          echo "üí∞ VM is created in STOPPED state to save costs!"
          
          if [ "$IP_METHOD" = "Dynamic" ]; then
            echo "üí° Dynamic IP: Only charged when VM is running (~$2.40/month when active)"
            echo "üîå Start VM to get IP: az vm start --resource-group $RESOURCE_GROUP_NAME --name $VM_NAME"
          else
            echo "üí° Static IP: Always charged (~$3.65/month) but IP is reserved"
            echo "üîå Start VM: az vm start --resource-group $RESOURCE_GROUP_NAME --name $VM_NAME"
          fi
          
          echo "üõë Stop VM to save costs: az vm deallocate --resource-group $RESOURCE_GROUP_NAME --name $VM_NAME"
          echo "üîß Use the 'Destroy' action to clean up all resources"

  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      RESOURCE_GROUP_NAME: "mehul02-Learning-Azure"

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Destroy confirmation not provided. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "‚úÖ Destroy confirmation validated"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: List VM resources to be destroyed
        run: |
          echo "üìã VM resources that will be destroyed:"
          
          # List VMs
          echo "üñ•Ô∏è  Virtual Machines:"
          az vm list --resource-group $RESOURCE_GROUP_NAME --query "[?contains(name, 'DevWin11Vm')].{Name:name, Size:hardwareProfile.vmSize, State:provisioningState}" -o table || echo "No VMs found"
          
          # List Network resources
          echo "üåê Network Resources:"
          az network vnet list --resource-group $RESOURCE_GROUP_NAME --query "[?contains(name, 'DevWin11Vm')].name" -o table || echo "No VNets found"
          az network public-ip list --resource-group $RESOURCE_GROUP_NAME --query "[?contains(name, 'DevWin11Vm')].{Name:name, IP:ipAddress, Method:publicIpAllocationMethod}" -o table || echo "No Public IPs found"
          az network nsg list --resource-group $RESOURCE_GROUP_NAME --query "[?contains(name, 'DevWin11Vm')].name" -o table || echo "No NSGs found"
          
          # List Disks
          echo "üíæ Disk Resources:"
          az disk list --resource-group $RESOURCE_GROUP_NAME --query "[?contains(name, 'DevWin11Vm')].{Name:name, Size:diskSizeGb, State:provisioningState}" -o table || echo "No disks found"

      - name: Wait for final confirmation
        run: |
          echo "‚è≥ Waiting 30 seconds before destruction..."
          echo "üö® This will permanently delete VM-specific resources only!"
          echo "üí° The resource group and other resources will remain untouched"
          echo ""
          echo "üìã Resources to be deleted:"
          echo "  - VM: DevWin11Vm"
          echo "  - Network Interface: DevWin11Vm-nic"
          echo "  - Public IP: DevWin11Vm-public-ip"
          echo "  - Network Security Group: DevWin11Vm-nsg"
          echo "  - Virtual Network: DevWin11Vm-vnet"
          echo "  - OS Disk: (deleted automatically with VM)"
          echo ""
          sleep 30

      - name: Delete VM and associated resources
        run: |
          echo "üóëÔ∏è  Deleting VM-specific resources..."
          
          RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          VM_NAME="DevWin11Vm"
          
          # Check if VM exists
          if az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --output none 2>/dev/null; then
            echo "‚úÖ VM '$VM_NAME' found, proceeding with deletion..."
            
            # Delete VM and associated resources in proper order
            echo "üñ•Ô∏è  Deleting Virtual Machine '$VM_NAME'..."
            az vm delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --yes --force-deletion yes || echo "‚ö†Ô∏è  VM deletion failed"
            
            echo "üîå Deleting Network Interface '$VM_NAME-nic'..."
            az network nic delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nic" || echo "‚ö†Ô∏è  NIC deletion failed or not found"
            
            echo "üåê Deleting Public IP '$VM_NAME-public-ip'..."
            az network public-ip delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-public-ip" || echo "‚ö†Ô∏è  Public IP deletion failed or not found"
            
            echo "üîí Deleting Network Security Group '$VM_NAME-nsg'..."
            az network nsg delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nsg" || echo "‚ö†Ô∏è  NSG deletion failed or not found"
            
            echo "üåê Deleting Virtual Network '$VM_NAME-vnet'..."
            az network vnet delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-vnet" || echo "‚ö†Ô∏è  VNet deletion failed or not found"
            
            echo "‚úÖ VM-specific resource cleanup completed"
          else
            echo "‚ùå VM '$VM_NAME' not found in resource group '$RESOURCE_GROUP_NAME'"
            echo "ÔøΩ Checking for any related resources to clean up..."
            
            # Try to clean up any orphaned resources
            echo "üîå Checking for orphaned Network Interface..."
            az network nic delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nic" || echo "‚ö†Ô∏è  NIC not found or deletion failed"
            
            echo "üåê Checking for orphaned Public IP..."
            az network public-ip delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-public-ip" || echo "‚ö†Ô∏è  Public IP not found or deletion failed"
            
            echo "üîí Checking for orphaned Network Security Group..."
            az network nsg delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-nsg" || echo "‚ö†Ô∏è  NSG not found or deletion failed"
            
            echo "üåê Checking for orphaned Virtual Network..."
            az network vnet delete --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME-vnet" || echo "‚ö†Ô∏è  VNet not found or deletion failed"
          fi

      - name: Final cleanup confirmation
        run: |
          echo "üéâ VM cleanup process completed!"
          echo ""
          
          RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          VM_NAME="DevWin11Vm"
          
          echo "üîç Final verification..."
          
          # Check if VM still exists
          if az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "$VM_NAME" --output none 2>/dev/null; then
            echo "‚ö†Ô∏è  VM '$VM_NAME' still exists in resource group '$RESOURCE_GROUP_NAME'"
            echo "üîç Check Azure Portal for deletion status"
          else
            echo "‚úÖ VM '$VM_NAME' has been successfully deleted"
          fi
          
          # Show remaining resources in the resource group
          echo ""
          echo "üìã Remaining resources in resource group '$RESOURCE_GROUP_NAME':"
          az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type}" -o table || echo "No resources found or resource group doesn't exist"
          
          echo ""
          echo "üí∞ This should help reduce your Azure costs!"
          echo "üìä VM-specific resources have been targeted for deletion"
          echo "üí° The resource group '$RESOURCE_GROUP_NAME' and other resources remain untouched"
          echo ""
          echo "‚è≥ Some resources may take a few minutes to fully delete."
          echo "üîç Check your Azure portal to confirm all VM resources are deleted."
