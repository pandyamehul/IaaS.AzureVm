name: Destroy Windows 11 VM (via Terraform)

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm resource deletion'
        required: true
        default: ''
      resource_group_name:
        description: 'Resource group name to destroy (optional - will use terraform.tfvars if empty)'
        required: false
        default: ''

jobs:
  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Destroy confirmation not provided. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "‚úÖ Destroy confirmation validated"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: azure-vm-deployment-Terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: azure-vm-deployment-Terraform

      - name: Check Terraform state and Azure resources
        run: |
          echo "üîç Checking Terraform state..."
          terraform state list || echo "‚ö†Ô∏è  No Terraform state found"
          
          echo ""
          echo "üîç Checking actual Azure resources..."
          RESOURCE_GROUP_NAME="${{ github.event.inputs.resource_group_name }}"
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          fi
          
          echo "üìã Checking resource group: $RESOURCE_GROUP_NAME"
          
          # Check if resource group exists
          if az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
            echo "‚úÖ Resource group '$RESOURCE_GROUP_NAME' exists"
            
            # List resources in the group
            echo "üìã Resources in resource group:"
            az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type, Location:location}" -o table || echo "‚ùå Failed to list resources"
            
            # Check for specific VM
            echo ""
            echo "üîç Checking for VM 'DevWin11Vm'..."
            if az vm show --resource-group "$RESOURCE_GROUP_NAME" --name "DevWin11Vm" --output none 2>/dev/null; then
              echo "‚úÖ VM 'DevWin11Vm' exists"
              VM_STATE=$(az vm show -d --resource-group "$RESOURCE_GROUP_NAME" --name "DevWin11Vm" --query powerState -o tsv)
              echo "üîã VM Power State: $VM_STATE"
            else
              echo "‚ùå VM 'DevWin11Vm' not found"
            fi
          else
            echo "‚ùå Resource group '$RESOURCE_GROUP_NAME' does not exist"
          fi
          
          echo ""
          echo "üìã Terraform plan for destruction:"
          terraform plan -destroy -var-file="terraform.tfvars"
        working-directory: azure-vm-deployment-Terraform

      - name: Wait for manual confirmation
        run: |
          echo "‚è≥ Waiting 30 seconds before destruction..."
          echo "üö® This will permanently delete all resources!"
          sleep 30

      - name: Terraform Destroy or Direct Azure Cleanup
        run: |
          echo "üóëÔ∏è  Attempting Terraform destroy..."
          
          # Try Terraform destroy first
          if terraform destroy -auto-approve -var-file="terraform.tfvars"; then
            echo "‚úÖ Terraform destroy completed successfully"
          else
            echo "‚ö†Ô∏è  Terraform destroy completed but may have had no resources to destroy"
          fi
          
          # Check if resources still exist in Azure and offer direct cleanup
          RESOURCE_GROUP_NAME="${{ github.event.inputs.resource_group_name }}"
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          fi
          
          echo ""
          echo "üîç Post-destroy check - verifying resource cleanup..."
          
          if az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
            echo "‚ö†Ô∏è  Resource group '$RESOURCE_GROUP_NAME' still exists"
            
            # List remaining resources
            REMAINING_RESOURCES=$(az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "length([])" -o tsv)
            
            if [ "$REMAINING_RESOURCES" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found $REMAINING_RESOURCES remaining resources in the resource group"
              echo "üìã Remaining resources:"
              az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type}" -o table
              
              echo ""
              echo "üóëÔ∏è  Performing direct Azure cleanup of remaining resources..."
              echo "‚ö†Ô∏è  This will delete ALL resources in the resource group!"
              
              # Delete all resources in the resource group
              az group delete --name "$RESOURCE_GROUP_NAME" --yes --no-wait
              
              echo "‚úÖ Resource group deletion initiated"
              echo "‚è≥ Deletion is running in the background and may take 5-10 minutes"
            else
              echo "‚úÖ No resources found in the resource group"
            fi
          else
            echo "‚úÖ Resource group '$RESOURCE_GROUP_NAME' does not exist (already deleted)"
          fi
        working-directory: azure-vm-deployment-Terraform
        env:
          TF_LOG: INFO

      - name: Final cleanup confirmation
        run: |
          echo "üéâ Cleanup process completed!"
          echo ""
          
          RESOURCE_GROUP_NAME="${{ github.event.inputs.resource_group_name }}"
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            RESOURCE_GROUP_NAME="mehul02-Learning-Azure"
          fi
          
          echo "üîç Final verification..."
          
          # Check final state
          if az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
            REMAINING_RESOURCES=$(az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "length([])" -o tsv)
            
            if [ "$REMAINING_RESOURCES" -gt 0 ]; then
              echo "‚ö†Ô∏è  Resource group '$RESOURCE_GROUP_NAME' still exists with $REMAINING_RESOURCES resources"
              echo "üìã Remaining resources:"
              az resource list --resource-group "$RESOURCE_GROUP_NAME" --query "[].{Name:name, Type:type}" -o table
              echo ""
              echo "‚è≥ Resources may still be deleting in the background"
              echo "üîç Check Azure Portal in 5-10 minutes to confirm complete deletion"
            else
              echo "‚úÖ Resource group '$RESOURCE_GROUP_NAME' exists but is empty"
              echo "üóëÔ∏è  You may want to delete the empty resource group manually"
            fi
          else
            echo "‚úÖ Resource group '$RESOURCE_GROUP_NAME' has been completely deleted"
          fi
          
          echo ""
          echo "üí∞ This should help reduce your Azure costs!"
          echo "üìä Check your Azure portal to confirm all resources are deleted"
          echo ""
          echo "üí° Next steps:"
          echo "   - If resources remain, check Azure Portal for deletion status"
          echo "   - Consider using ARM templates for future deployments"
          echo "   - ARM templates handle resource lifecycle better than Terraform for learning scenarios"
